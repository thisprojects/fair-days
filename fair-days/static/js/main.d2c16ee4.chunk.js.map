{"version":3,"sources":["App/Utils/unixTimeConverter.js","App/Components/WeatherCards.js","App/Utils/networkRequests.js","App/Components/Fade.js","App/Components/Input.js","App/Components/Intro.js","App/index.js","serviceWorker.js","index.js"],"names":["calculateDate","timeStamp","suffix","a","Date","month","getMonth","date","getDate","day","getDay","ChanceOfRain","rainChance","className","size","toFixed","CloudCover","cloudCover","SunnyDay","isSunnyDay","color","Temp","high","low","farenToCelc","faren","Card","fairDay","shrinkSingleCard","precipProbability","summary","unixTime","time","temperatureHigh","temperatureLow","style","maxWidth","WeatherCards","goodWeatherDays","length","map","index","key","fetchCoords","location","fetch","method","body","then","r","json","coords","results","geometry","address","fetchWeather","lat","lng","daily","getData","data","forcasts","Fade","duration","showComponent","children","animationDuration","Input","state","invalidInput","textInput","handleInputSubmit","e","preventDefault","setState","inputValue","replace","props","handleChange","event","target","value","clearInput","type","onChange","this","onFocus","onClick","Component","Intro","FairDays","cachedResults","currentResult","errors","loading","resultIsCached","fetchAndCacheWeatherForcast","getForcastData","catch","x","undefined","filter","showIntro","showWeatherCards","icon","faSpinner","pulse","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d2c16ee4.chunk.js","sourcesContent":["const calculateDate = timeStamp => {\n  const a = new Date(timeStamp * 1000);\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n  const days = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n  ];\n  const month = months[a.getMonth()];\n  const date = a.getDate();\n  const day = days[a.getDay()];\n  let suffix;\n\n  if (date == 3 || date == 23) {\n    suffix = \"rd\";\n  } else if (date == 2 || date == 22) {\n    suffix = \"nd\";\n  } else if (date == 1 || date == 21 || date == 31) {\n    suffix = \"st\";\n  } else {\n    suffix = \"th\";\n  }\n\n  return `${day} ${date}${suffix} of ${month}`;\n};\n\nexport default calculateDate;\n","import React from \"react\";\nimport calculateDate from \"../Utils/unixTimeConverter\";\nimport {\n  WiRain as Rain,\n  WiCloud as Cloud,\n  WiDaySunny as Sun,\n  WiThermometer as Therm\n} from \"react-icons/wi\";\nimport { FaRegSadTear as Tear } from \"react-icons/fa\";\n\nconst ChanceOfRain = ({ rainChance }) => (\n    <div className=\"card-item\">\n      <Rain size={ 50 } />\n      <p>{ (rainChance * 100).toFixed() }% chance</p>\n    </div>);\n\n\nconst CloudCover = ({ cloudCover }) => (\n    <div className=\"card-item\">\n      <Cloud size={ 50 } />\n      <p>Cover { (cloudCover * 100).toFixed() }%</p>\n    </div>);\n\n\n\nconst SunnyDay = ({ isSunnyDay }) => ( isSunnyDay && \n      <div>\n        <Sun color=\"#f7b167\" size={ 50 } />\n      </div>); \n\n\nconst Temp = ({ high, low }) => {\n  const farenToCelc = faren => (faren - 32) / 1.8;\n  return (\n    <div className=\"card-item\">\n      <Therm size={ 50 } />\n      <p className=\"temperature-card-item\">\n        { farenToCelc(low).toFixed() } - { farenToCelc(high).toFixed() }Â°c\n      </p>\n    </div>\n  );\n};\n\nconst Card = ({ fairDay: day = {}, shrinkSingleCard } = {}) => {\n  const {\n    cloudCover,\n    precipProbability,\n    summary,\n    time: unixTime,\n    temperatureHigh,\n    temperatureLow\n  } = day;\n\n  return (\n    <div className=\"card\" style={ shrinkSingleCard ? { maxWidth: \"25%\" } : null }>\n      <p>{ calculateDate(unixTime) }</p>\n      <ChanceOfRain rainChance={ precipProbability } />\n      <CloudCover cloudCover={ cloudCover } />\n      <Temp high={ temperatureHigh } low={ temperatureLow } />\n      <p className=\"card-item\">{ summary }</p>\n      <SunnyDay isSunnyDay={ cloudCover < 0.3 } />\n    </div>\n  );\n};\n\nconst WeatherCards = ({ goodWeatherDays }) => {\n  if (goodWeatherDays.length > 0) {\n    return (\n      <div className=\"weather-cards-wrapper\">\n        { goodWeatherDays.map((day, index) => (\n          <Card\n            key={ index }\n            fairDay={ day }\n            shrinkSingleCard={ goodWeatherDays.length == 1 }\n          />\n        ))}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"tear\">\n        <Tear size={ 50 } color=\"grey\" />\n      </div>\n    );\n  }\n};\n\nexport default WeatherCards;\n","const fetchCoords = location => {\n  return (\n    fetch(\n      \"https://us-central1-nathan-downes-express-api.cloudfunctions.net/api/maps\",\n      { method: \"POST\", body: `${ location }` }\n    )\n      .then(r => r.json())\n      // return search locations lat and lng and formatted address.\n      .then(r => ({\n        coords: r.results[0].geometry.location,\n        address: r.results[0][\"formatted_address\"]\n      }))\n  );\n};\n\nconst fetchWeather = ({ lat, lng }) => {\n  return (\n    fetch(\n      \"https://europe-west1-my-project-1501505786926.cloudfunctions.net/get-weather\",\n      { method: \"POST\", body: `${ lat },${ lng }` }\n    )\n      .then(r => r.json())\n      // return daily forcasts\n      .then(r => ({ daily: r.daily }))\n  );\n};\n\nconst getData = async location => {\n  const { coords, address } = await fetchCoords(location);\n  const { daily: { data } = {} } = await fetchWeather(coords);\n  return { address, forcasts: data };\n};\n\nexport default getData;\n","import React from \"react\";\n\nconst Fade = ({ duration = \"0.1s\", showComponent, children }) =>\n  showComponent && (\n    <div className=\"fade-in\" style={{ animationDuration: `${ duration }` }}>\n      { children }\n    </div>\n  );\n\nexport default Fade;\n","import React, { Component } from \"react\";\n\nclass Input extends Component {\n  state = {\n    invalidInput: false,\n    textInput: \"Enter a City, Town or Postcode\"\n  };\n\n  handleInputSubmit = e => {\n    e.preventDefault();\n    this.setState({ invalidInput: false });\n    // remove whitespace and special characters - this helps with caching locations\n    const inputValue = this.state.textInput.replace(/[^\\w\\d]|\\_/g, \"\");\n\n    if (inputValue.length > 0) {\n      this.props.fetchWeather(inputValue);\n    } else {\n      this.setState({ invalidInput: true });\n    }\n  };\n\n  handleChange = event => {\n    this.setState({ textInput: event.target.value });\n  };\n\n  clearInput = () => {\n    this.setState({ textInput: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"location-input\">\n        <form>\n          <label>\n            <input\n              type=\"text\"\n              onChange={this.handleChange}\n              onFocus={this.clearInput}\n              value={this.state.textInput}\n            />\n            <button onClick={this.handleInputSubmit}>Search</button>\n            {this.state.invalidInput && (\n              <p className=\"invalid-input\">\n                Hmmm... have you entered a location?\n              </p>\n            )}\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React from 'react'\n\nconst Intro = () => {\n  return (\n    <div className=\"intro\">\n      <h3>The weather app that only shows you fair weather days. </h3>\n      <h4>What are fair weather days? They have:</h4>\n      <ul>\n        <li>Under 25% chance of rain</li>\n        <li>Under 70% cloud cover</li>\n        <li>A temperature of over 10 degrees C</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Intro","import React, { Component } from \"react\";\nimport WeatherCards from \"./Components/WeatherCards\";\nimport getForcastData from \"./Utils/networkRequests\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport Fade from \"./Components/Fade\";\nimport Input from \"./Components/Input\";\nimport Intro from \"./Components/Intro\";\n\nclass FairDays extends Component {\n  state = {\n    cachedResults: {},\n    currentResult: {},\n    errors: false,\n    loading: false\n  };\n\n  resultIsCached = inputValue => this.state.cachedResults[inputValue];\n\n  fetchAndCacheWeatherForcast = async inputValue => {\n    this.setState({ errors: false });\n    // Display cached results, if they exist.\n    if (this.resultIsCached(inputValue)) {\n      this.setState({\n        currentResult: this.state.cachedResults[inputValue]\n      });\n    } else {\n      //Otherwise fetch ,cache and display results.\n      this.setState({ loading: true });\n      const x = await getForcastData(inputValue).catch(() =>\n        this.setState({ errors: true })\n      );\n      this.setState(\n        () => (\n          (this.state.currentResult = this.state.cachedResults[inputValue] = x),\n          (this.state.loading = false)\n        )\n      );\n    }\n  };\n\n  render() {\n    const { address, forcasts = [] } =\n      this.state.currentResult != undefined && this.state.currentResult;\n\n    const goodWeatherDays = forcasts.filter(\n      day =>\n        day.precipProbability < 0.25 &&\n        day.cloudCover < 0.7 &&\n        day.temperatureHigh >= 49\n    );\n\n    // Conditions for displaying the intro and weather card components\n    const showIntro =\n      !forcasts.length && !this.state.loading && !this.state.errors;\n    const showWeatherCards =\n      forcasts.length > 0 && !this.state.loading && !this.state.errors;\n\n    const WeatherSummary = () => (\n      <div>\n        <p>\n          Over the next 8 days there will be {goodWeatherDays.length} good\n          weather days in {address}.\n        </p>\n      </div>\n    );\n\n    const Loading = () => (\n      <h2>\n        <FontAwesomeIcon size=\"2x\" color=\"gray\" icon={faSpinner} pulse />\n      </h2>\n    );\n\n    const Errors = () =>\n      this.state.errors && (\n        <div className=\"errors\">\n          <p>\n            Whoops... Someting went wrong! Are you sure your location name is\n            correct? Try again!\n          </p>\n        </div>\n      );\n\n    return (\n      <div>\n        <header>\n          <div className=\"title\">\n            <h1 className=\"fair-days\">Fair Days</h1>\n            <span>Weather Forcast</span>\n          </div>\n          <Input fetchWeather={ this.fetchAndCacheWeatherForcast } />\n        </header>\n        {showIntro && <Intro />}\n        <Fade showComponent={ this.state.loading } duration={ \"0.2s\" }>\n          <Loading />\n        </Fade>\n        <Fade duration={ \"1.0s\" } showComponent={ showWeatherCards }>\n          <WeatherSummary />\n          <WeatherCards goodWeatherDays={ goodWeatherDays } />\n        </Fade>\n        <Errors />\n      </div>\n    );\n  }\n}\n\nexport default FairDays;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FairDays from '../src/App/index.js';\nimport './App/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FairDays />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}